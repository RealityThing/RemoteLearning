{"version":3,"sources":["utils/is-empty.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","actions/types.js","reducers/videosReducer.js","store.js","utils/setAuthToken.js","actions/authActions.js","components/layout/PrivateRoute.js","components/layout/Navbar.js","components/layout/TextFieldGroup.js","components/layout/Landing.js","components/account/Login.js","components/account/Register.js","utils/valueHelpers.js","components/room/CreateRoom.js","components/challenges/Challenge.js","components/challenges/Challenges.js","components/layout/TextArea.js","components/layout/SelectList.js","components/room/Results.js","components/layout/RadioButtons.js","components/room/Owner.js","components/room/Participant.js","components/layout/Spinner.js","components/room/ChangeUsername.js","components/room/ViewRoom.js","actions/videosActions.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js","assets/logo.png"],"names":["isEmpty","value","undefined","Object","keys","length","trim","initialState","isAuthenticated","user","allReducers","combineReducers","auth","state","arguments","action","type","objectSpread","payload","errors","videos","_action$payload","stream","console","log","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","connect","_ref","Component","component","rest","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","Redirect","to","Navbar","onLogoutClick","event","preventDefault","_this","logoutUser","_this$props$auth","this","authLinks","className","Link","onClick","src","avatar","alt","name","style","width","marginRight","title","guestLinks","data-toggle","data-target","id","TextFieldGroup","dispatch","localStorage","removeItem","placeholder","classes","icon","label","error","info","onChange","disabled","concat","for","defaultProps","Landing","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","e","_this$state","roomId","setState","get","then","res","data","history","push","catch","err","response","getItem","_this2","logo","noValidate","layout_TextFieldGroup","target","Login","defineProperty","userData","email","password","loginUser","nextProps","Register","post","setItem","jwt_decode","withRouter","newUser","first_name","last_name","password2","registerUser","eachKey","obj","getValueIndexOfArray","val","key","arr","findIndex","ele","getCharNWordsCount","str","chars","words","split","CreateRoom","componentWillMount","asyncToGenerator","regenerator_default","mark","_callee","username","rooms","wrap","_context","prev","next","JSON","parse","sent","storedUsername","stop","_ref2","_callee3","room","c","_context3","abrupt","_ref3","_callee2","_context2","_id","owner","stringify","_x2","_x","_this$state2","Challenge","challenge","href","selectChallenge","comingSoon","React","Challenges","challengesStore","map","challenges_Challenge","TextArea","infoClass","SelectList","elems","document","querySelectorAll","M","FormSelect","init","_this$props","defaultValue","options","selected","time","option","Results","answerStatus","userId","participants","answer","includes","myId","users","question","participant","RadioButtons","choices","selectedChoice","choice","checked","Owner","countDown","clearChoices","addChoice","showChallenges","challengeStatus","onEditChallenge","startChallenge","setChallengeStatus","Fragment","challenges_Challenges","layout_TextArea","layout_RadioButtons","layout_SelectList","timer","room_Results","Participant","sendAnswer","answerSent","studentAnswer","Spinner","ChangeUsername","changeUsername","setUsername","componentDidMount","loading","inValidId","userIsSet","socket","validateRoomId","io","socketEvents","Tooltip","getUsers","userJoined","getNewMessages","userLeft","getChallenge","getParticipants","nameChange","leaveRoom","userRooms","isOwner","match","params","success","saveRoom","_ref4","_callee4","_context4","emit","_x3","_ref5","_callee5","_context5","on","messages","showOwnerTag","_x4","getOwner","msg","msgs","toConsumableArray","_ref6","_callee6","_context6","_x5","sendMessage","message","_this$state3","_ref7","_callee7","_context7","splice","_x6","_ref8","_callee8","_context8","_this$state4","recentLeavers","_x7","_ref9","_callee9","_context9","oldName","newName","_this$state5","_class","_x8","closeRoom","_this$state6","window","confirm","_ref10","_callee10","_context10","roomEnded","_x9","typing","status","_e$target","_this$state7","hasParticipated","answers","_this$state8","alert","newChallenge","initTimer","countDownIsZero","setInterval","clearInterval","timerReachedZero","challengeTimer","_this$state9","_timer","challengeCompleted","_this$state10","_this$state11","filter","countDownStarting","localVideoRef","createRef","user_streams","_this$state12","challengeResults","room_ChangeUsername","data-position","data-tooltip","room_Owner","room_Participant","i","profile","setStream","Footer","class","jwtToken","App","es","BrowserRouter","exact","path","ViewRoom","Boolean","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.461a9951.chunk.js","sourcesContent":["const isEmpty = (value) => {\n    return (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\n        (typeof value === 'string' && value.trim().length === 0)\n    );\n}\n\nexport default isEmpty;\n","\n// Action Types\nimport { SET_CURRENT_USER } from \"../actions/types\";\n\nimport isEmpty from '../utils/is-empty'\n\n// This will be the state for this reducer when the application starts up\nconst initialState = {\n    isAuthenticated: false,\n    user: {}\n};\n\n// A reducer exports a function which takes the current state and an action\nexport default function (state = initialState, action) {\n\n    // Depending on the action type, the reducer will update the store\n    // The data passed in can be accessed via action.payload\n    switch (action.type) {\n\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n\n        default:\n            return state;\n    }\n}\n\n\n","\n// Action Types\nimport { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\nconst initialState = {};\n\n\nexport default function(state = initialState, action) {\n\n    switch (action.type) {\n\n        case GET_ERRORS:\n            return action.payload; // This will be sent to the errors state which can then display errors in the view\n\n        case CLEAR_ERRORS:\n            return {};\n\n        default:\n            return state;\n    }\n}\n","/*\n * Combines together all reducers to one big object to the store\n */\nimport { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport errorReducer from './errorReducer';\nimport videosReducer from './videosReducer';\n\n\n// The key is how you can access the state within your components\n// If you create a new reducer, you must add it here.\nconst allReducers = combineReducers({\n    auth: authReducer,\n    errors: errorReducer,\n    videos: videosReducer\n});\n\nexport default allReducers;\n","export const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\nexport const SET_STREAM = 'SET_STREAM';\nexport const GET_STREAMS = 'GET_STREAMS';\n\n","\n// Import types\nimport { SET_STREAM } from '../actions/types';\n\n// Exporting reducer...\nexport default function(state = {}, action) {\n\n    switch (action.type) {\n\n        case SET_STREAM:\n            let { stream, user} = action.payload;\n            state[user] = stream; \n            console.log('state', state);\n\n            return state;\n\n        default:\n            return state;\n    }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;\n","import axios from 'axios';\n\n\n// This will make sure to assign the account header\nconst setAuthToken = token => {\n\n    if (token) {\n        // Apply to every request\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        // Delete account header\n        delete axios.defaults.headers.common['Authorization'];\n    }\n};\n\nexport default setAuthToken;\n","import axios from 'axios';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from 'jwt-decode';\n\n// Action types\nimport { SET_CURRENT_USER } from \"./types\";\nimport { GET_ERRORS } from \"./types\";\n\n\n// Actions gets called from component props which they call reducers to change the state of the data\n\n\n// Register\nexport const registerUser = (userData, history) => dispatch => {\n\n    axios\n        .post('/api/user/register', userData)\n        .then(res => {\n            const { token } = res.data;\n\n            // Set token to LocalStorage\n            localStorage.setItem('jwtToken', token);\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            // Set user to state\n\n            // decode token to get user data\n            const decoded = jwt_decode(token);\n            console.log(decoded)\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n\n        }) \n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n\n// Login - Get User Token\nexport const loginUser = (userData) => dispatch => {\n    axios\n        .post('/api/user/login', userData)\n        .then(res => {\n\n            // Once we get the response back, save to LocalStorage\n            const { token } = res.data;\n\n            // Set token to LocalStorage\n            localStorage.setItem('jwtToken', token);\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n\n            // Set user to state\n\n            // decode token to get user data\n            const decoded = jwt_decode(token);\n            console.log(decoded)\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n};\n\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken');\n\n    // Remove account header for future requests\n    setAuthToken(false);\n\n    // Set current user to {} which will set isAuthenticate to false\n    dispatch(setCurrentUser({}));\n\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route\n        {...rest}\n        render = {props =>\n            // Check if the user is authenticated, if it is then load the component, otherwise redirect to login\n            auth.isAuthenticated === true ? (\n                <Component {...props}/>\n            ) : (\n                <Redirect to=\"/login\"/>\n            )\n        }\n    />\n);\n\n\n\nPrivateRoute.propTypes = {\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n   auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// import components\nimport { logoutUser } from \"../../actions/authActions\";\n\nclass Navbar extends Component {\n\n    onLogoutClick = (event) => {\n        event.preventDefault();\n        this.props.logoutUser();\n    };\n\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n\n        const authLinks = (\n            <ul className=\"navbar-nav ml-auto\">\n\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/\">Learning Together</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"\" className=\"nav-link\" onClick={this.onLogoutClick}>\n                        <img src={user.avatar}\n                             alt={user.name}\n                             className=\"rounded-circle\"\n                             style={{ width: '25px', marginRight: '5px'}}\n                             title=\"You must have a Gravatar connected to your email to display an image\" />\n                        {\" \"}\n                        Log out\n                    </Link>\n                </li>\n            </ul>\n        );\n\n        const guestLinks = (\n            <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/register\">Sign Up</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/login\">Login</Link>\n                </li>\n            </ul>\n        );\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">MERNQuick</Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n\n                        { isAuthenticated ? authLinks : guestLinks }\n\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nNavbar.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logoutUser })(Navbar);\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport '../../styles/main.css';\n\nconst TextFieldGroup = ({\n    name,\n    placeholder,\n    classes,\n    value,\n    icon,\n    label,\n    error,\n    info,\n    type,\n    onChange,\n    disabled\n}) => {\n    return (\n        <div className=\"input-field\">\n            {icon && <i className=\"material-icons prefix\">{icon}</i>}\n            <input type={type}\n                className={`validate ${classes}`}\n                placeholder={placeholder}\n                name={name}\n                id={name}\n                value={value}\n                onChange={onChange}\n                disabled={disabled}\n            />\n            {label && <label for={name}>{label}</label>}\n            {error ? (<span className=\"helper-text invalid-feedback\"> {error} </span>) \n            : info ? (<span className=\"helper-text\" >{info}</span>\n            ) : null }\n\n        </div>\n    )\n}\n\nTextFieldGroup.propTypes = {\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    placeholder: PropTypes.string,\n    label: PropTypes.string,\n    error: PropTypes.string,\n    info: PropTypes.string,\n    disabled: PropTypes.string\n};\n\nTextFieldGroup.defaultProps = {\n    type: 'text'\n};\n\nexport default TextFieldGroup;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport TextFieldGroup from '../layout/TextFieldGroup';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios'\nimport isEmpty from '../../utils/is-empty'\nimport '../../styles/main.css'\nimport logo from '../../assets/logo.png'\n\nclass Landing extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            roomId: '',\n            errors: {},\n            id: false\n        }\n    }\n\n    componentDidMount() {\n        let id = localStorage.getItem('id')\n        if (!isEmpty(id)) this.setState({ id })\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        let { roomId, id } = this.state;\n        let errors = {}\n\n        if (isEmpty(roomId)) {\n            errors.roomId = 'Please enter a valid room ID'\n            this.setState({ errors })\n            return;\n        }\n        id = id ? id : 'none'\n        // call api to check if room exists\n        axios.get(`/api/room/${roomId}/${id}`)\n            .then(res => {\n                console.log(res.data);\n                this.props.history.push(`/room/${roomId}`)\n            })\n            .catch(err => {\n                console.log(err.response.data)\n                if (err && err.response && err.response.data) {\n                    this.setState({ errors: err.response.data })\n                }\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"dark-overlay landing-inner mt-3\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"text-center\">\n                                <div className=\"center\">\n                                    <img src={logo} className=\"logo\"/>\n                                    <div className=\"info-msg\">\n                                        <span>An interactive platform for schools, university or anyone!<br/> Ask questions and challenge others in real-time.<br/> No sign-up required, just create a room then send the link to others.</span>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <form noValidate onSubmit={this.onSubmit}>\n                                        <div className=\"col s12 m0 l3\"/>\n                                        <div className=\"col s12 m6 l3\">\n                                            <TextFieldGroup\n                                                type=\"text\"\n                                                placeholder=\"Paste room ID\"\n                                                name=\"roomId\"\n                                                value={this.state.roomId}\n                                                onChange={e => this.setState({ roomId: e.target.value })}\n                                                error={this.state.errors.roomId}\n                                            />\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col btnt\">\n                                                <input type=\"submit\" value=\"Enter Room\" className=\"btn btn-info btn-block mt-4\"/>\n                                            </div>\n\n                                            <div className=\"col btnt\">\n                                                <Link to=\"/create\" className=\"btn btn-lg btn-light\">Create a room</Link>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(Landing);\n","\n// React\nimport React, { Component } from 'react';\n\n// Connecting redux\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\n\n// Components\nimport TextFieldGroup from '../layout/TextFieldGroup';\n\n// import the action that you want to use\nimport { loginUser } from \"../../actions/authActions\";\n\nclass Login extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            errors: {}\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if (nextProps.auth.isAuthenticated) {\n            this.props.history.push('/');\n        }\n\n        if (nextProps.errors){\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    onChange = (event) => {\n        this.setState({\n           [event.target.name]: event.target.value\n        });\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n\n        const userData = {\n            email: this.state.email,\n            password: this.state.password\n        };\n\n        this.props.loginUser(userData);\n    }\n\n    render() {\n\n        const { errors } = this.state;\n\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form noValidate onSubmit={this.onSubmit}>\n\n                                <TextFieldGroup\n                                    type=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                    error={errors.email}\n                                />\n\n                                <TextFieldGroup\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    name=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.onChange}\n                                    error={errors.password}\n                                />\n\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                                <Link to=\"/register\">Don't have an account? Register here</Link>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, { loginUser })(withRouter(Login));\n","\n// React\nimport React, { Component } from 'react';\n\n// Connecting Redux\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\n// Components\nimport TextFieldGroup from '../layout/TextFieldGroup';\n\n// Actions\nimport { registerUser } from '../../actions/authActions';\n\n\n// Defining a custom component/class\nclass Register extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            first_name: '',\n            last_name: '',\n            email: '',\n            password: '',\n            password2: '',\n            errors: {}\n        };\n    };\n\n    componentDidMount() {\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors){\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    // This method gets triggered when a user enters something\n    onChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    // This method gets called when a user submits\n    onSubmit = (event) => {\n        event.preventDefault();\n\n        const newUser = {\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            email: this.state.email,\n            password: this.state.password,\n            password2: this.state.password2\n        };\n\n        this.props.registerUser(newUser, this.props.history);\n    };\n\n    render() {\n\n        // Desctructing allows us to pull errors from the state object\n        const { errors } = this.state;\n        const { user } = this.props.auth;\n\n        // Set class 'is-invalid' only if there is an errors name.\n\n        return (\n            <div className=\"register\">\n                {user ? user.name : null}\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n\n                            <form noValidate onSubmit={this.onSubmit}>\n                                <TextFieldGroup\n                                    label=\"First name\"\n                                    name=\"first_name\"\n                                    value={this.state.first_name}\n                                    onChange={this.onChange}\n                                    error={errors.first_name}\n                                />\n\n                                <TextFieldGroup\n                                    label=\"Last name\"\n                                    name=\"last_name\"\n                                    value={this.state.last_name}\n                                    onChange={this.onChange}\n                                    error={errors.last_name}\n                                />\n\n                                <TextFieldGroup\n                                    type=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                    error={errors.email}\n                                />\n\n                                <TextFieldGroup\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    name=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.onChange}\n                                    error={errors.password}\n                                />\n\n                                <TextFieldGroup\n                                    type=\"password\"\n                                    label=\"Confirm Password\"\n                                    name=\"password2\"\n                                    value={this.state.password2}\n                                    onChange={this.onChange}\n                                    error={errors.password2}\n                                />\n\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n// Mapping prop types e.g. registerUser is a function so we set the proptypes as function and required.\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\n\n// mapping state to props, state.account comes from the rootreducer\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors\n})\n\n// Export all actions used\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\n\n","import isEmpty from \"./is-empty\";\n\nconst isObject = val => val instanceof Object\nconst isArray = val => val instanceof Array\nconst matchingType = (val, val2) => typeof val === typeof val2\n\nexport const areObjectsDifferent = (obj1, obj2, isDif = false) => {\n\n    if (isObject(obj1) && isObject(obj2)) {\n    \n        for (let key of Object.keys(obj1)) {\n    \n            if (key in obj2 && !isDif) {\n\n                // check if item is an array\n                if (isArray(obj1[key]) && isArray(obj2[key]) && !isDif) {\n                    isDif = lookOverArray(obj1[key], obj2[key]);\n\n                // recusrively call check objects to check inner values\n                } else if (isObject(obj1[key]) && isObject(obj2[key]) && !isDif) {\n                    console.log('recusive call', obj1[key])\n                    isDif = areObjectsDifferent(obj1[key], obj2[key]);\n                    console.log('recusive call ended', isDif)\n\n                    if (isDif) {\n                        console.log(3);\n                        return true;\n                    };\n\n                // check if values are matching\n                } else if (matchingType(obj1[key], obj2[key]) && !isDif) {\n                    if (obj1[key] != obj2[key]) {\n                        console.log(2)\n                        return true;\n                    }\n\n                    console.log('same type')\n                    \n                } else {\n                    console.log(4, 'different types')\n                    return true;\n                }\n\n                if (isDif) {\n                    console.log(5)\n                    return true;\n                }\n\n            } else {\n                console.log(6, 'key not in other object')\n                return true\n            }\n        }\n    } else {\n        return true;\n    }\n    \n    return false;\n}\n\nconst lookOverArray = (arr, arr2) => {\n    console.log('array')\n\n    if (arr.length == arr2.length) {\n        let eles = arr.filter((item, i) => {\n            if (item != arr2[i]) {\n\n                if (isArray(item) && isArray(arr2[i])) {\n                    let isDif = lookOverArray(item, arr2[i]);\n                    if (isDif) return item;\n\n                } else if (isObject(item) && isObject(arr2[i])) {\n                    console.log('recusive call', item)\n                    let isDif = areObjectsDifferent(item, arr2[i]);\n                    console.log('recusive call ended', isDif)\n\n                    if (isDif) return item;\n                    \n                } else {\n                    return item;\n                }\n            }\n        })\n\n        return eles.length > 0 ? true : false\n\n    } else {\n        return true;\n    }\n}\n\nexport const eachKey = obj => {\n    return Object.keys(obj);\n}\n\nexport const getValueIndexOfArray = (val, key, arr) => {\n    return arr.findIndex(ele => ele[key] == val)\n}\n\n// let obj1 = {\n//     age: 22,\n//     name: 'Sami',\n//     items: ['laptop', 1, 'item', {\n//         name: 'hello',\n//         age: 'geg',\n//         afge: {\n//             fdsfs: '123',\n//             fsdf: [\n//                 '13',\n//                 234234,\n//                 ['fds', 213]\n//             ]\n//         }\n//     }, ['fds', '1231']]\n// }\n\n// let obj2 = {\n//     age: 22,\n//     name: 'Sami',\n//     items: ['laptop', 1, 'item', {\n//         name: 'hello',\n//         age: 'geg',\n//         afge: {\n//             fdsfs: '123',\n//             fsdf: [\n//                 '13',\n//                 234234,\n//                 ['fds', 213]\n//             ]\n//         }\n//     }, ['fds', '1231']]\n// };\n\n// console.log(areObjectsDifferent(obj1, obj2) ? 'different objects' : 'same objects')\nexport const getCharNWordsCount = str => {\n    if (isEmpty(str)) return false\n\n    str = str.trim()\n\n    let chars = str.length\n    let words = str.split(' ').length\n\n    return { chars, words }\n}\nexport default {\n    areObjectsDifferent,\n    getValueIndexOfArray,\n    eachKey,\n    getCharNWordsCount\n}","\n// React and redux modules\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios'\nimport TextFieldGroup from '../layout/TextFieldGroup';\nimport isEmpty from '../../utils/is-empty'\nimport '../../styles/main.css'\nimport { getCharNWordsCount, eachKey } from '../../utils/valueHelpers';\nimport logo from '../../assets/logo.png'\n\n// Custom react component/class\nclass CreateRoom extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            room: '',\n            id: '',\n            username: '',\n            storedUsername: '',\n            errors: {},\n            rooms: []\n        }\n    }\n\n    componentWillMount = async () => {\n        let id = localStorage.getItem('id')\n        let username = localStorage.getItem('username')\n        let rooms = localStorage.getItem('rooms');\n\n        if (!isEmpty(rooms)) {\n            rooms = await JSON.parse(rooms);\n\n            console.log(rooms);\n            this.setState({rooms});\n        }\n\n        if (!isEmpty(id)) this.setState({ id })\n        if (!isEmpty(username)) this.setState({ username, storedUsername: username });\n    }\n\n\n    componentWillReceiveProps(nextProps){\n        if (nextProps.errors){\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    onChange = (event) => {\n        this.setState({\n           [event.target.name]: event.target.value\n        });\n    }\n\n    onSubmit = async e => {\n        e.preventDefault();\n        \n        let { room, rooms, username, id, storedUsername } = this.state;\n\n        let data = { room, username, id: !isEmpty(id) ? id : false };\n        let errors = {}\n\n        if (isEmpty(room)) {\n            errors.room = 'Please enter a room name'\n            this.setState({ errors })\n        } \n\n        let c = getCharNWordsCount(username);\n\n        if (isEmpty(username) || c && c.chars < 7 || c.words < 2) {\n            errors.username = 'Please enter your full name'\n            this.setState({ errors })\n        }\n\n        if (!isEmpty(errors)) return\n\n        axios.post(`/api/room`, data)\n            .then(async res => {\n                if (res && res.data && res.data._id) {\n                    console.log(res.data);\n\n                    if (storedUsername != username) {\n                        localStorage.setItem('username', username)\n                        this.setState({ storedUsername: username, errors });\n                    }\n\n                    if (isEmpty(id)) {\n                        localStorage.setItem('id', res.data.owner)\n                    } else if (id != res.data.owner) {\n                        console.log('somethings wrong')\n                    }\n\n                    rooms.push(res.data._id);\n                    localStorage.setItem('rooms', JSON.stringify(rooms));\n                    console.log(rooms);\n                    this.props.history.push(`/room/${res.data._id}`)\n                }\n            })\n            .catch(err => {\n                if (err && err.response && err.response.data)\n                    this.setState({ errors: err.response.data })\n            })\n    }\n\n    render() {\n\n        const { errors, username, room } = this.state;\n\n        return (\n            <div className=\"login landing\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <div className=\"center\">\n                                <img src={logo} className=\"logo\"/>\n                            </div>\n                            <form noValidate onSubmit={this.onSubmit}>\n                                \n                                <div className=\"row\">\n                                    <div className=\"col s12 m0 l3\"/>\n                                    <div className=\"col s12 m6 l3\">\n                                        <TextFieldGroup\n                                            type=\"text\"\n                                            placeholder=\"Full Name\"\n                                            info=\"This will be shown to the students\"\n                                            name=\"username\"\n                                            value={username}\n                                            onChange={e => this.setState({ username: e.target.value })}\n                                            error={errors.username}\n                                        /> \n                                    </div>\n                                \n                                    <div className=\"col s12 m6 l3\">\n                                        <TextFieldGroup\n                                            type=\"text\"\n                                            placeholder=\"Class Name\"\n                                            info=\"e.g CS-101-Class1\"\n                                            name=\"room\"\n                                            value={room}\n                                            onChange={this.onChange}\n                                            error={errors.room}\n                                        />\n                                    </div>\n\n                                    <div className=\"col btnt\">\n                                        <input type=\"submit\" value=\"Create\" className=\"btn btn-info btn-block mt-4\"/>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateRoom\n","import React from 'react';\n\nclass Challenge extends React.Component {\n\n    render () {\n        let { challenge } = this.props;\n\n        return (\n            <a href=\"javascript:void(0);\" className=\"collection-item challenge\" onClick={() => this.props.selectChallenge && this.props.selectChallenge(challenge)}>\n                <div className=\"header\">\n                    <h5>{challenge.name}</h5>\n                    { challenge.comingSoon && <span>Coming Soon</span>}\n                    {/* <span>{challenge.description}</span> */}\n                </div>\n            </a>\n        )\n    }\n}\n\nexport default Challenge","\n// React and redux modules\nimport React, { Component } from 'react';\n\nimport '../../styles/main.css';\nimport Challenge from './Challenge';\nimport challengesStore from '../../challenges.json';\n\n// Custom react component/class\nclass Challenges extends Component {\n\n    render() {\n        return (\n            <div className=\"collection challenges\">\n                { challengesStore.map(challenge => {\n                    return <Challenge key={challenge.id} challenge={challenge} {...this.props}/>\n                })}\n\n                <Challenge challenge={{ name: 'Sketching', comingSoon: true}} />\n            </div>\n        )\n    }\n}\n\n\nexport default Challenges\n","\nimport React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport TextFieldGroup from \"./TextFieldGroup\";\nimport isEmpty from '../../utils/is-empty';\n\nconst TextArea = ({\n                            name,\n                            placeholder,\n                            classes,\n                            value,\n                            icon,\n                            label,\n                            error,\n                            info,\n                            infoClass,\n                            onChange,\n                            disabled\n                        }) => {\n    return (\n        <div className=\"input-field\">\n            {icon && <i className=\"material-icons prefix\">{icon}</i>}\n            <textarea\n                className={`materialize-textarea validate ${classes}`}\n                placeholder={placeholder}\n                id={name}\n                name={name}\n                disabled={disabled}\n                value={value}\n                onChange={onChange}\n            />\n            {label && <label className={!isEmpty(value) ? 'active' : ''} for={name}>{label}</label>}\n            {error ? (<span className=\"helper-text invalid-feedback\"> {error} </span>) \n            : info ? (<span className={`helper-text ${infoClass}`} >{info}</span>\n            ) : null }\n\n        </div>\n    )\n}\n\nTextArea.propTypes = {\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    placeholder: PropTypes.string,\n    error: PropTypes.string,\n    info: PropTypes.string\n};\n\n\n\nexport default TextArea;\n","\nimport React from 'react';\nimport classnames from 'classnames';\nimport M from 'materialize-css';\n\nclass SelectList extends React.Component {\n\n    componentDidMount() {\n        var elems = document.querySelectorAll('select');\n        var instances = M.FormSelect.init(elems, {});\n    }\n\n    render () { \n        let { name,\n            value,\n            defaultValue,\n            label,\n            error,\n            info,\n            onChange,\n            options } = this.props;\n\n        return (\n            <div className=\"input-field\">\n                <select onChange={onChange} name={name} value={value}>\n                    <option value=\"\" disabled selected>{defaultValue}</option>\n                    { name == 'timer' ? [5,10,20,30,40,50,60].map(time => <option key={time} value={time}>{time} seconds</option>) : options.map(option => <option key={option} value={option}>{option}</option>)}\n                </select>\n                {label && <label>{label}</label>}\n                {info && (<small className=\"form-text text-mutated\">{info}</small>)}\n                {error && (<div className=\"invalid-feedback\"> {error} </div>)}\n            </div>\n        )\n    }\n}\n\nexport default SelectList;\n","import React from 'react'\nimport isEmpty from '../../utils/is-empty'\n\n\nclass Results extends React.Component {\n\n     // returns correct, close, not quite\n     answerStatus = (userId, challenge) => {\n        if (userId in challenge.participants) {\n            if (challenge.participants[userId] == challenge.answer) {\n                return 'correct'\n            } else if (challenge.answer.includes(challenge.participants[userId])) {\n                return 'close'\n            } else {\n                return 'not quite'\n            }\n\n        } else {\n            return 'hmmm. something went wrong'\n        }\n    }\n\n    render() {\n        let { myId, users, challenge } = this.props;\n\n        return (\n            <div>\n                <ul className=\"collection with-header\">\n                    <li className=\"collection-header\">\n                        <h4 className=\"heading\">{challenge.question}</h4>\n                        <h5 className=\"me\">Answer: {challenge.answer}</h5>\n                        <span>{`${challenge.participants.length} participant${challenge.participants.length > 1 ? 's' : ''}`}</span>\n                    </li>\n                   \n                    { challenge.participants.map(participant => {\n                        return (\n                            <li className={`collection-item ${participant.id == myId && 'my-answer'}`}>\n                                <p>{participant.name} answered: {participant.answer === null ? 'loading...' : isEmpty(participant.answer) ? 'none' : participant.answer}</p>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Results","\nimport React from 'react';\nimport '../../styles/main.css'\n\nconst RadioButtons = ({\n            choices,\n            name,\n            classes,\n            error,\n            info,\n            infoClass,\n            onChange,\n            disabled,\n            selectedChoice\n        }) => {\n            console.log(selectedChoice, choices)\n    return (\n        <div className=\"input-field\">\n            <div className=\"row center\">\n                { choices.map(choice => {\n                    return (\n                        <label>\n                            <input \n                                className={`with-gap ${classes}`} \n                                disabled={disabled} \n                                name={name} \n                                type=\"radio\"  \n                                value={choice}\n                                onChange={onChange}\n                                checked={selectedChoice == choice}\n                            />\n                            <span className=\"radiolabel\">{choice}</span>\n                        </label>\n                    )\n                })}\n            </div>\n            <div className=\"row\">\n                    {error ? (<span className=\"helper-text invalid-feedback\"> {error} </span>) \n                    : info ? (<span className={`helper-text ${infoClass}`} >{info}</span>\n                    ) : null }\n            </div>\n        </div>\n    )\n}\n\nexport default RadioButtons;\n","import React from 'react';\nimport Challenges from '../challenges/Challenges';\nimport challengesStore from '../../challenges.json'\nimport TextFieldGroup from '../layout/TextFieldGroup'\nimport TextArea from '../layout/TextArea'\nimport SelectList from '../layout/SelectList'\nimport Results from './Results';\nimport RadioButtons from '../layout/RadioButtons';\n\nclass Owner extends React.Component {\n\n    render () {\n        const { myId, users, room, challenge, errors, countDown,clearChoices, addChoice, showChallenges, challengeStatus, selectChallenge, onEditChallenge, startChallenge, setChallengeStatus } = this.props;\n        return (\n            <>\n                { challengeStatus == 'wait' && showChallenges ? (\n                        <Challenges selectChallenge={selectChallenge}/> \n                    ) : challengeStatus == 'edit' ? (\n                        <>\n                            <h5>{challenge.name}</h5>\n                            <form noValidate onSubmit={e => { e.preventDefault(); }}>\n                                <TextArea\n                                    type=\"text\"\n                                    label=\"Question\"\n                                    name=\"question\"\n                                    error={errors.question}\n                                    value={challenge.question}\n                                    onChange={onEditChallenge}\n                                />\n                                \n                                { challenge.type == 'Q&A' ? (\n                                    <TextArea\n                                        type=\"text\"\n                                        label=\"Answer (this will not be shown to the students)\"\n                                        name=\"answer\"\n                                        error={errors.answer}\n                                        value={challenge.answer}\n                                        onChange={onEditChallenge}\n                                    />\n                                ) : (\n                                    <>\n                                        <div className=\"row\">\n                                            <div className=\"col s8\">\n                                                <TextArea\n                                                    type=\"text\"\n                                                    label=\"Add a choice\"\n                                                    name=\"choice\"\n                                                    error={errors.choice}\n                                                    value={challenge.choice}\n                                                    onChange={onEditChallenge}\n                                                />\n                                            </div>\n                                            <div className=\"col\">\n                                                <button onClick={addChoice} className=\"btn btnt btn-small\"> Add choice</button>\n                                            </div>\n                                            <br/>\n                                            <a onClick={clearChoices} href=\"javascript:void(0);\" className=\"link-dash\">Clear</a>\n                                        </div>\n                                        <RadioButtons \n                                            selectedChoice={challenge.answer}\n                                            choices={challenge.choices}\n                                            name=\"answer\"\n                                            error={errors.answer}\n                                            onChange={onEditChallenge}\n                                        />\n                                    </>\n                                )}\n                                \n                                <div className=\"row\">\n                                    <div className=\"col s6\">\n                                        <TextArea\n                                            type=\"text\"\n                                            label=\"Info (optional)\"\n                                            name=\"info\"\n                                            value={challenge.info}\n                                            onChange={onEditChallenge}\n                                        />\n                                    </div>\n\n                                    <div className=\"col s6\">\n                                        <SelectList \n                                            name=\"timer\"\n                                            label=\"Timer\"\n                                            value={challenge.timer}\n                                            defaultValue=\"Select a timer\"\n                                            onChange={onEditChallenge}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"col\">\n                                    <input onClick={startChallenge} type=\"submit\" value=\"Begin Challenge\" className=\"btn btn-primary\"/>\n                                </div>\n\n                                <div className=\"col\">\n                                    <button className=\"btn btn-primary\" onClick={() => selectChallenge(null)}>Cancel</button>\n                                </div>\n                            </form>\n                        </>\n                    ) : challengeStatus == 'start' ? (\n                        // show timer, number of users answered\n                         <>\n                            { countDown > 0 ? (\n                                <>\n                                    <h4 className=\"heading\">Challenge starting in {countDown}</h4>\n                                </>\n                            ) : (\n                                <>\n                                    <h4 className=\"heading\">{challenge.question}</h4>\n                                    <span>{`${challenge.participants.length} participant${challenge.participants.length > 1 ? 's' : ''} - ${challenge.timer} second${challenge.timer > 1 ? 's' : ''} left`}</span>\n                                </>\n                            )}\n\n                        </>\n                    ) : challengeStatus == 'complete' ? (\n                        // once timer has reached zero, display the answer the results of all students to everyone\n                        <>\n                            <Results myId={myId} users={users} challenge={challenge} />\n                            <button className=\"btn btn-primary\" onClick={() => setChallengeStatus('wait')}>New Challenge</button>\n                        </>\n                    ) : null\n                }\n\n                { !showChallenges || challengeStatus == 'wait' || challengeStatus == 'edit' ? (\n                    <div className=\"send-link-section\">\n                        <span>Send this link to your students so they can join the room.</span>\n                        <br/>\n                        <a className=\"link\" target=\"_blank\" href={`http://localhost:3000/room/${room._id}`}>{`http://learningtogether.com/room/${room._id}`}</a>\n                    </div>  \n                ) : null }\n            </>\n        )\n    }\n}\n\nexport default Owner","import React from 'react';\nimport Challenges from '../challenges/Challenges';\nimport challengesStore from '../../challenges.json'\nimport TextFieldGroup from '../layout/TextFieldGroup'\nimport TextArea from '../layout/TextArea'\nimport SelectList from '../layout/SelectList'\nimport Results from './Results';\nimport RadioButtons from '../layout/RadioButtons';\n\nclass Participant extends React.Component {\n\n    render () {\n        const { myId, users, countDown, errors, sendAnswer, answerSent, challenge, challengeStatus, onEditChallenge } = this.props;\n        return (\n            <>\n                {\n                    challengeStatus == 'wait' ? (\n                        <>\n                            <p>You will be notified when the owner creates a challenge.</p>\n                        </>\n                    ) : challengeStatus == 'start' ? (\n                        <>\n                            { countDown > 0 ? (\n                                <>\n                                    <h4 className=\"heading\">Challenge starting in {countDown}</h4>\n                                </>\n                            ) : (\n                                <>\n                                    <h4 className=\"heading\">{challenge.question}</h4>\n                                    <span>{`${challenge.participants.length} participant${challenge.participants.length > 1 ? 's' : ''} - ${challenge.timer} second${challenge.timer > 1 ? 's' : ''} left`}</span>\n                                   \n                                    <form noValidate onSubmit={sendAnswer}>\n                                        { challenge.type == 'Q&A' ? (\n                                            <TextArea\n                                                type=\"text\"\n                                                label=\"Type out your answer\"\n                                                name=\"studentAnswer\"\n                                                disabled={answerSent}\n                                                error={errors.studentAnswer}\n                                                value={challenge.studentAnswer}\n                                                info={answerSent ? 'Your answer has been recorded.' : false}\n                                                infoClass='me'\n                                                onChange={e => onEditChallenge(e, 'participant')}\n                                            />  \n                                        ) : (\n                                            <div className=\"row center\">\n                                                <RadioButtons \n                                                    selectedChoice={challenge.studentAnswer}\n                                                    choices={challenge.choices}\n                                                    name=\"studentAnswer\"\n                                                    error={errors.studentAnswer}\n                                                    disabled={answerSent}\n                                                    info={answerSent ? 'Your answer has been recorded.' : false}\n                                                    infoClass='me'\n                                                    onChange={e => onEditChallenge(e, 'participant')}\n                                                />\n                                            </div>\n                                        )}\n                                        <input type=\"submit\" value=\"Send answer\" disabled={answerSent} className=\"btn btn-primary\"/>\n                                    </form>\n                                </>\n                            )}\n                        </>\n                    ) : challengeStatus == 'complete' ? (\n                        // once timer has reached zero, display the answer the results of all students to everyone\n                        <Results myId={myId} users={users} challenge={challenge} />\n                    ) : null\n                }\n            </>\n        )\n    }\n}\n\nexport default Participant","import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"col loader center\">\n            <div className=\"preloader-wrapper big active center\">\n                <div className=\"spinner-layer spinner-blue-only\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div><div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div><div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport TextFieldGroup from '../layout/TextFieldGroup';\nimport logo from '../../assets/logo.png'\n\nconst ChangeUsername = ({ username, changeUsername, setUsername, errors, room }) => {\n    return (\n        <div className=\"col-md-12 text-center\">\n            <div className=\"center\">\n                <img src={logo} className=\"logo\"/>\n                <h4 className=\"joining\">Joining {room.name}</h4>\n            </div>\n            <div className=\"row\">\n                <form noValidate onSubmit={setUsername}>\n                    <div className=\"col s4\"/>\n                    <div className=\"col s3\">\n                        <TextFieldGroup\n                            type=\"text\"\n                            placeholder=\"Enter your full name to join the room\"\n                            name=\"username\"\n                            value={username}\n                            onChange={changeUsername}\n                            error={errors.username}\n                        />           \n                    </div>\n\n                    <div className=\"col btnt\">\n                        <input type=\"submit\" value=\"Enter\" className=\"btn btn-primary\"/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ChangeUsername","\n// React and redux modules\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport axios from 'axios'\nimport isEmpty from '../../utils/is-empty'\nimport '../../styles/main.css'\nimport io from \"socket.io-client\";\nimport TextFieldGroup from '../layout/TextFieldGroup';\nimport { setStream } from \"../../actions/videosActions\";\nimport Owner from './Owner';\nimport Participant from './Participant'\nimport { getValueIndexOfArray, eachKey, getCharNWordsCount } from '../../utils/valueHelpers'\nimport Spinner from '../layout/Spinner'\nimport M from 'materialize-css';\nimport ChangeUsername from './ChangeUsername';\n\n// const configuration = {'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]}\n// var peerConnection = new RTCPeerConnection(configuration)\n// var globalUsers = {};\n/*\n    32432525: { \n        name, \n        status,\n        offer,\n        streamId\n    }\n*/\nconst HOST = 'http://remotelearning.space' // 'http://remotelearning.space/\nvar streams = {};\nvar hasReceived = false;\n\n// peerConnection.onaddstream = async event => {\n//     console.log('stream received:', event.stream.id)\n//     console.log(globalUsers)\n\n//     for (let userId of Object.keys(globalUsers)) {\n\n//         // find which user this stream is for\n//         if ('streamId' in globalUsers[userId] && globalUsers[userId].streamId == event.stream.id) {\n\n//             if (userId in streams) { \n//                 streams[userId].stream = event.stream\n    \n//             } else {\n//                 streams[userId] = { stream: event.stream }\n//             }\n\n//             console.log('streamed user found:', userId)\n//         }\n//     }\n    \n//     // remoteStream.addTrack(event.track, remoteStream);\n//     // store.dispatch(setStream(event.streams[0], 1));\n// };\n\n// Custom react component/class\nclass CreateRoom extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            room: {},\n            rooms: [],\n            socket: null,\n            stream: null,\n            roomEnded: false,\n\n            loading: true,\n            inValidId: false,\n            userIsSet: false,\n            errors: {},\n\n            id: '',\n            username: '',\n            storedUsername: '',\n            isOwner: false,\n            changeUsername: false,\n\n            // Challenge data\n            challengeStatus: 'wait', // 'edit', 'start', 'complete'\n            challenge: null,\n            showChallenges: false,\n            countDown: 0,\n            countDownStarting: true,\n            hasParticipated: false,\n            answerSent: false,\n\n            users: {},\n            recentLeavers: [],\n\n            messages: [],\n            message: '',\n            \n            localVideoRef: React.createRef(),\n            user_streams: {}\n        }\n        this.timerReachedZero = null\n        this.countDownIsZero = null\n    }\n\n    componentDidMount = async() => {\n        await this.validateRoomId();\n        const { loading, inValidId, room, userIsSet } = this.state;\n\n        if (!loading && !inValidId && !isEmpty(room)) {\n            let socket = io();\n\n            console.log('socket', socket)\n            // document.getElementById('remote').srcObject = remoteStream;\n            this.setState({ socket }, () => userIsSet && this.socketEvents(socket));\n        }\n        var elems = document.querySelectorAll('.tooltipped');\n        var instances = M.Tooltip.init(elems, {});\n    }\n\n    // refresh = async () => {\n    //     this.state.socket.emit('disconnect');\n    //     this.setState({\n    //         room: {},\n    //         rooms: [],\n    //         socket: null,\n    //         stream: null,\n    //         roomEnded: false,\n\n    //         loading: true,\n    //         inValidId: false,\n    //         userIsSet: false,\n    //         errors: {},\n\n    //         id: '',\n    //         username: '',\n    //         storedUsername: '',\n    //         isOwner: false,\n    //         changeUsername: false,\n\n    //         challengeStatus: 'wait',\n    //         challenge: null,\n    //         showChallenges: false,\n    //         countDown: 0,\n    //         countDownStarting: true,\n\n    //         users: {},\n    //         recentLeavers: [],\n\n    //         messages: [],\n    //         message: '',\n            \n    //         localVideoRef: React.createRef(),\n    //         user_streams: {}\n    //     }, async () => {\n    //         this.timerReachedZero = null\n    //         this.countDownIsZero = null\n    //         await this.validateRoomId();\n    //         const { loading, inValidId, room, userIsSet } = this.state;\n\n    //         if (!loading && !inValidId && !isEmpty(room)) {\n    //             let socket = io();\n\n    //             // document.getElementById('remote').srcObject = remoteStream;\n    //             this.setState({ socket }, () => userIsSet && this.socketEvents(socket));\n    //         }\n    //     })\n    // }\n\n    socketEvents = async socket => {\n\n        // this.getStream();\n        this.newUser(socket);\n        this.getUsers(socket);\n        // this.updateStreams();\n        this.userJoined(socket);\n        this.getNewMessages(socket);\n        this.userLeft(socket);\n        this.getChallenge(socket);\n        this.getParticipants(socket)\n        this.nameChange(socket);\n        this.leaveRoom(socket)\n\n        // socket.on(\"new-offer\", async (offer, from, users) => {\n        //     this.createRTCAnswer(offer, from, users)\n        // });\n        // this.answerReceived(socket);\n\n        // setInterval(() => {\n        //     socket.emit('get-all-offers');\n        //     console.log('get offers called')\n        // }, 50000)\n\n        // socket.on('get-offers', async users => {\n        //     this.checkForNewOffers(users)\n        // })\n    }\n\n    // getStream = async () => {\n    //     let { socket, localVideoRef } = this.state;\n    //     let stream = null;\n    //     let constraints = { video: true, audio: true, video: { width: 320 } }\n\n    //     try {\n    //         stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n    //         try {\n    //             localVideoRef.current.srcObject = stream;\n\n    //         } catch (error) {\n    //             localVideoRef.current.src = URL.createObjectURL(stream);\n    //         }\n\n    //         console.log('my id:', socket.id)\n    //         this.setState({ stream });\n\n    //         stream.getTracks().forEach(track => {\n    //             peerConnection.addTrack(track, stream)\n    //         });\n            \n    //         this.sendStream();\n          \n    //     } catch(err) {\n    //         console.log(err)\n    //     }\n    // }\n\n    // sendStream = async () => {\n    //     let { socket, stream } = this.state;\n    //     const offer = await peerConnection.createOffer();\n    //     await peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n    //     socket.emit(\"send-offer\", offer, stream.id);\n    //     console.log('stream sent:', stream.id)\n    // }\n\n    // createRTCAnswer = async (offer, from, users) => {\n    //     let { socket } = this.state;\n    //     // console.log('client 2 received offer from', from);\n\n    //     globalUsers = users;\n        \n    //     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n    //     const answer = await peerConnection.createAnswer();\n    //     await peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n\n    //     let client1 = from;\n    //     let client2 = socket.id;\n\n    //     // send answer back to the client who created the connection\n    //     // console.log('client 2 sent offer back to client 1 to create connection')\n    //     socket.emit(\"send-answer\", answer, client1, client2);\n    // }\n\n    // answerReceived = async socket => {\n    //     socket.on(\"answer-received\", async (answer) => {\n\n    //         await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n\n    //         if (!hasReceived) {\n    //             this.sendStream();\n    //             hasReceived = true;\n    //         }\n    //     });\n    // }\n\n    // updateStreams = () => {\n    //     setInterval(() => {\n    //         let { socket, user_streams, recentLeavers } = this.state;\n            \n    //         let user = socket.id;\n    //         let newStreams = {}\n\n    //         if (recentLeavers.length > 0) {\n    //             console.log('recentLeavers', recentLeavers)\n\n    //             // remove user stream\n    //             recentLeavers.forEach(id => {\n    //                 if (id in streams) {\n    //                     delete streams[id]\n    //                     console.log('delete', id)\n    //                 } \n\n    //                 if (id in user_streams) {\n    //                     delete user_streams[id]\n    //                     console.log('delete', id)\n    //                 }\n    //             })\n\n    //             this.setState({ recentLeavers: [], user_streams })\n    //         }\n\n    //         Object.keys(streams).forEach(key => {\n    //             if (!(key in user_streams) && key != user) {\n    //                 newStreams[key] = { stream: streams[key].stream, streamRef: React.createRef() }\n    //             }\n    //         })\n\n    //         if (Object.keys(newStreams).length > 0) {\n    //             this.setState({ \n    //                 user_streams: { ...user_streams, ...newStreams }\n    //             }, () => {\n\n    //                 setTimeout(() => {\n    //                     let { user_streams } = this.state;\n\n    //                     for (let newUser of Object.keys(newStreams)) {\n    //                         let eStream = user_streams[newUser].stream;\n\n    //                         try {\n    //                             user_streams[newUser].streamRef.current.srcObject = eStream;\n    //                         } catch (error) {\n    //                             user_streams[newUser].streamRef.current.src = URL.createObjectURL(eStream);\n    //                         }\n    //                     }\n    //                     this.setState({ user_streams }, () => console.log('stream passed to ref', this.state.user_streams))\n\n    //                 }, 5000)\n    //             })\n    //         }\n    //     }, 5000)\n\n    //     // console.log(socket && socket.id == user ? 'my stream' : 'adding stream')\n    //     // if (user in user_streams || socket && socket.id == user) return;\n\n    // }\n\n    validateRoomId = async e => {\n        let roomId = this.props.match.params.id;\n\n        if (isEmpty(roomId)) {\n            this.setState({ inValidId: true })\n            return;\n        }\n\n        let userRooms = localStorage.getItem('rooms');\n        let id = localStorage.getItem('id');\n        let storedUsername = localStorage.getItem('username');\n\n        if (!isEmpty(userRooms)) \n            userRooms = await JSON.parse(userRooms) \n        else \n            userRooms = []\n        \n        let userIsSet = false;\n        let username = '';\n\n        if (isEmpty(storedUsername)) {\n            username = ''\n        } else {\n            username = storedUsername\n            userIsSet = true;\n        }\n\n        this.setState({ id, username, userIsSet, storedUsername, rooms: userRooms })\n        id = id ? id : 'none'\n        // call api to check if room exists\n        let res = await axios.get(`/api/room/${roomId}/${id}`)\n        try {\n            console.log(res.data);\n            if (res && res.data && res.data.success) {\n                let isOwner = false;\n                if (id && id == res.data.room.owner) isOwner = true\n                console.log('isOwner', isOwner);\n                if (userIsSet) this.saveRoom(res.data.room);\n                this.setState({ inValidId: false, loading: false, isOwner, room: res.data.room });\n            } else {\n                console.log(2)\n            }\n        } catch (err) {\n            console.log(err.response.data)\n            this.setState({ inValidId: true, loading: false })\n        }\n    }\n\n    newUser = async socket => {\n        let { room, username, id } = this.state;\n        socket.emit('new-user', room._id, username, room.owner == id);\n    }\n\n    getUsers = async socket => {\n        socket.on('get-users', users => {\n            this.setState({ users }, () => {\n                let {messages} = this.state;\n                if (messages.length === 0) {\n                    this.showOwnerTag();\n                }\n            });            \n        })\n    }\n\n    showOwnerTag = () => {\n        let { messages } = this.state;\n        let name = this.getOwner('name');\n        if (name) {\n            let msg = <div className=\"small-text\"><strong className=\"owner\">{name}</strong> is the owner</div>\n            let msgs = [...messages]\n            msgs[0] = msg;\n            console.log(msgs)\n            this.setState({ messages: msgs })\n        }\n    }\n\n    // checkForNewOffers = (users) => {\n    //     let { user_streams, socket } = this.state;\n    //     if (Object.keys(users).length === 0) return;\n\n    //     for (let key of Object.keys(users)) {\n    //         // check if there is an offer and we dont already have it\n    //         if ('offer' in users[key] && !(key in user_streams) && key != socket.id) {\n    //             console.log('offer found from', key)\n    //             this.createRTCAnswer(users[key].offer, key, users)\n    //         }\n    //     }\n    // }\n\n    userJoined = async socket => {\n        socket.on('user-joined', user => {\n            let msg = [<strong className=\"other\">{user}</strong>, ' has joined the room']\n            this.setState({ messages: [...this.state.messages, msg] })\n        })\n    }\n\n    sendMessage = e => {\n        e.preventDefault();\n\n        if (!isEmpty(this.state.message)) {\n            this.state.socket.emit('send-message', this.state.message)\n            this.setState({ message: '' });\n        }\n    }\n\n    changeUsername = e => this.setState({ username: e.target.value })\n\n    setUsername = e => {\n        e.preventDefault();\n        let { socket, username, storedUsername, userIsSet, room, changeUsername } = this.state;\n\n        let errors = {}\n        \n        let c = getCharNWordsCount(username);\n\n        if (isEmpty(username) || c && c.chars < 7 || c.words < 2) {\n            errors.username = 'Please enter your full name'\n            this.setState({ errors })\n            return;\n        }\n\n        if (username != storedUsername) {\n            localStorage.setItem('username', username)\n            this.setState({ storedUsername: username });\n        }\n\n        if (userIsSet) {\n            if (changeUsername) {\n                socket.emit('name-change', username);\n                this.setState({ changeUsername: false })\n            };\n            return\n        }\n\n        this.saveRoom(room)\n        this.setState({ userIsSet: true, errors }, () => this.socketEvents(socket));\n    }\n\n    saveRoom = room => {\n        let { rooms } = this.state;\n        if (rooms.includes(room._id)) return\n\n        this.setState({ rooms: [...rooms, room._id]})\n        localStorage.setItem('rooms', JSON.stringify(rooms));\n    }   \n\n    getNewMessages = async socket => {\n        socket.on('new-message', data => {\n            let { messages } = this.state;\n\n            let msg = [<strong className={data.id == socket.id ? 'me' : data.id == this.getOwner() ? 'owner' : 'other' }>{data.username}</strong>, ': ' + data.message];\n            let msgs = [...messages]\n\n            if (msgs.length >= 25)\n                msgs.splice(1, 1);\n\n            msgs.push(msg);\n            this.setState({ messages: msgs })\n        })\n    }\n\n    userLeft = async socket => {\n        socket.on('user-left', id => {\n            let { users, recentLeavers } = this.state;\n\n            let msg = [<strong className=\"other\">{users[id].name}</strong>, ' has left the room']\n            if (!recentLeavers.includes(id)) {\n                this.setState({ recentLeavers: [...recentLeavers, id] })\n            }\n            this.setState({ messages: [...this.state.messages, msg]})\n        })\n    }\n\n    nameChange = async socket => {\n        socket.on('get-name-change', (oldName, newName, id) => {\n            let { messages, isOwner } = this.state;\n            let ownerChangeName = id == this.getOwner();\n\n            let _class = ownerChangeName && !isOwner ? 'owner' : socket.id == id ? 'me' : 'other'\n\n            let msg = [\n                <strong className={_class}>{socket.id == id ? 'You': oldName}</strong>, \n                ` changed ${socket.id == id ? 'your' : 'their'} name to `, \n                <strong className={_class}>{newName}</strong>\n            ]\n            this.setState({ messages: [...messages, msg]})\n        })\n    }\n\n    closeRoom = () => {\n        let {room, id, socket} = this.state;\n        if (id && id == room.owner) {\n            let procced = window.confirm(`This will kick all the users and close the room, you may re-open the room again by going to the same URL. Are you sure you want to procced?`);\n            if (!procced) return\n\n            socket.emit('close-room')\n        }\n    }\n\n    leaveRoom = async socket => {\n        socket.on('leave-room', () => {\n            this.setState({ roomEnded: true });\n        })\n    }\n\n    typing = e => {\n        this.setState({ message: e.target.value });\n    }\n\n    // renderVideos = () => {\n    //     const { localVideoRef, user_streams } = this.state;\n    //     return (\n    //         <div className=\"col videos\">\n    //             <div className=\"video-view-mode\">\n    //                 {/* Add single view mode on click */}\n    //             </div>\n    //             <video ref={localVideoRef} muted autoPlay className=\"local-video\"></video>\n    //             {/* <video id=\"remote\" muted autoPlay className=\"remote-video\"></video> */}\n\n    //             { Object.keys(user_streams).map(user => {\n    //                 console.log('vid', user_streams[user])\n    //                 return <video ref={user_streams[user].streamRef} muted autoPlay className=\"remote-video\"></video>\n    //             })}\n    //         </div>\n    //     )\n    // }\n\n    selectChallenge = challenge => {\n        this.setState({ challenge: {...challenge, owner: this.state.socket.id}, challengeStatus: challenge == null ? 'wait' : 'edit' })\n    }\n\n    onEditChallenge = (e, status=false) => {\n        let { name, value } = e.target;\n\n        this.setState({ \n            challenge: {\n                ...this.state.challenge,\n                [name]: value\n            }\n         }, () => {\n            let { socket, challenge, hasParticipated } = this.state\n\n             if (status == 'participant') {\n                 console.log(name, value);\n\n                if (hasParticipated) return;\n\n                this.setState({ hasParticipated: true });\n                if (getValueIndexOfArray(socket.id, 'id', challenge.participants) === -1) {\n                    socket.emit('new-participant', challenge);\n                }\n             }\n         })\n    }\n\n    addChoice = () => {\n        let { challenge } = this.state;\n        let errors = {}\n\n        if (isEmpty(challenge.choice)){\n            errors.choice = 'You must add a choice'\n        } else if (challenge.choices.includes(challenge.choice)) {\n            errors.choice = 'This choice is already added'\n        } else if (challenge.choices.length > 7) {\n            errors.choice = 'Too many choices.'\n        }\n\n        if (eachKey(errors).length > 0) {\n            this.setState({ errors })\n            return\n        }\n\n        this.setState({ errors, challenge: {...challenge, choices: [...challenge.choices, challenge.choice], choice: '' }})\n    }\n\n    getParticipants = socket => {\n        socket.on('get-participants', (participants, answers) => {\n            console.log('participants', participants)\n            this.setState({ challenge: { ...this.state.challenge, participants} });\n        })\n    }\n    \n    startChallenge = e => {\n        e.preventDefault();\n        let { socket, challenge, users } = this.state;\n        let errors = {};\n\n        if (isEmpty(challenge.question)) {\n            errors.question = 'Question field cannot be empty'\n        }\n\n        if (isEmpty(challenge.answer)) {\n            if (challenge.type == 'Q&A') {\n                errors.answer = 'Answer field cannot be empty'\n            } else {\n                if (challenge.choices.length > 1) {\n                    errors.answer = 'You must select the correct answer'\n                }\n            }\n        }\n\n        if (challenge.type == 'MC' && challenge.choices.length < 2) {\n            errors.choice = 'You must add atleast 2 choices'\n        }\n\n        if (eachKey(errors).length) {\n            this.setState({ errors })\n            return\n        }\n        \n        if (eachKey(users).length === 1 && socket.id in users) {\n            window.alert('There are no students in the room, send them the link so they can join.');\n            return\n        }\n\n        let c = {\n            ...challenge,\n            question:  challenge.question.trim(),\n            answer: challenge.answer.trim()\n        }\n\n        console.log(c.answer)\n\n        let beginNow = window.confirm(`There is ${eachKey(users).length - 1} student${eachKey(users).length - 1 > 1 ? 's' : ''} in the room, do you want to begin the challenge now?`);\n        if (!beginNow) return\n\n        this.setState({ errors, challenge: c, challengeStatus: 'start', countDown: 5 }, () => {\n            this.newChallenge(socket, this.state.challenge);\n            this.initTimer()\n        });\n    }\n\n    // Owner\n    newChallenge = (socket, challenge) => {\n        socket.emit('new-challenge', challenge);\n    }\n\n    // Students\n    getChallenge = socket => {\n        socket.on('get-challenge', challenge => {\n            this.setState({ challenge, challengeStatus: 'start', countDown: 5 }, () => this.initTimer());\n        })\n    }\n\n    initTimer = () => {\n        this.countDownIsZero = setInterval(this.countDown, 1000);\n    }\n\n    countDown = () => {\n        let { countDown } = this.state;\n\n        if (countDown > 0) {\n            countDown -= 1;\n            this.setState({ countDown });\n\n        } else {\n            clearInterval(this.countDownIsZero);\n            this.timerReachedZero = setInterval(this.challengeTimer, 1000);\n        }\n    }\n\n    challengeTimer = () => {\n        let { challenge, socket } = this.state;\n        let _timer = challenge.timer;\n\n        if (_timer > 1) {\n            _timer -= 1\n            this.setState({ challenge: { ...this.state.challenge, timer: _timer }})\n\n        } else {\n            clearInterval(this.timerReachedZero);\n            this.timerReachedZero = null;\n\n            this.challengeCompleted();\n        }\n    }\n\n    sendAnswer = e => {\n        e.preventDefault();\n        let { socket, challenge } = this.state;\n\n        if (isEmpty(challenge.studentAnswer)) {\n            this.setState({ errors: { studentAnswer: challenge.type == 'Q&A' ? 'You must provide an answer' : 'You must select an answer' }});\n            return\n        } else {\n            this.setState({ errors: {} });\n        }\n\n        let answer = challenge.studentAnswer.trim();\n        this.setState({ answerSent: true });\n\n        if (socket.id != challenge.owner) {\n            socket.emit('send-answer', challenge.id, answer)\n        }\n    }\n\n    challengeCompleted = () => {\n        let { socket, challenge } = this.state;\n        console.log('completed')\n        this.setState({ answerSent: false, hasParticipated: false });\n        // if (socket.id == challenge.owner) {\n        //     socket.emit('reset-challenge')\n        // }\n\n        this.setState({ challengeStatus: 'complete' })\n    }\n\n    setChallengeStatus = status => {\n        if (status == 'wait' || status == 'edit' || status == 'start' || status == 'complete')\n            this.setState({ challengeStatus: status });\n    }\n\n    getOwner = (name=false) => {\n        let { users } = this.state;\n        let id = eachKey(users).filter(id => users[id].owner)\n        if (id && id.length){\n            if (name) {\n                return users[id[0]].name\n            } else {\n                return id[0]\n            }\n        }\n        return false;\n    }\n\n    clearChoices = () => {\n        let { challenge } = this.state;\n\n        if (challenge) { \n            this.setState({ challenge: { ...challenge, choices: [], answer: '' }})\n        }\n    }\n\n    render() {\n        const { showChallenges, username, roomEnded, answerSent, changeUsername, errors, room, socket, loading, inValidId, users, messages, userIsSet, isOwner, countDown, challenge, challengeStatus, challengeResults } = this.state;\n\n        return (\n            <div className=\"row\">\n                { loading ? <Spinner/> : inValidId ? 'Invalid ID' : !userIsSet || changeUsername ? (\n                    <ChangeUsername username={username} changeUsername={this.changeUsername} setUsername={this.setUsername} errors={errors} room={room} />\n                ) : roomEnded ? (\n                    <>\n                        { isOwner ? <p>You have closed the room.</p> : <p>Room has ended.</p>}\n                    </>\n                ) : (\n                    <div className=\"row\">\n                        {/* Left column */}\n                        <div className=\"col s8 nav\">\n                            <div className=\"row\">\n                                <div className=\"col s3 m6 l8\">\n                                    <h4>{room.name}</h4>\n                                    <span>Hi {username} </span>\n                                    <div>\n                                        <a className=\"link-dash\" onClick={() => this.setState({ changeUsername: true })} href=\"javascript:void(0);\">Change username</a>\n                                    </div>\n                                    <div>\n                                        <a className=\"red-color link-dash\" onClick={() => this.closeRoom()} href=\"javascript:void(0);\">Close room</a>\n                                    </div>\n                                    <br/>\n                                    <span>Users: {eachKey(users).length}</span>\n                                </div>\n                                { isOwner && (\n                                    <div className=\"col\">\n                                        <div className=\"top-create-btn\">\n                                            <a className=\"btn\" onClick={() => this.setState({ challengeStatus: 'wait', showChallenges: true })}>\n                                                <i className=\"material-icons right\">add</i> \n                                                new challenge\n                                            </a>\n                                        </div>\n                                    </div>\n                                )}\n                                <div className=\"col\">\n                                    <div className=\"top-create-btn\">\n                                        <a className=\"btn whiteboardbtn tooltipped\" data-position=\"bottom\" data-tooltip=\"Coming soon\">\n                                            <i className=\"material-icons right\">dashboard</i> \n                                            Whiteboard\n                                        </a>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col s8 mainArea\">\n                                    <div className=\"center\">\n                                        { isOwner ? <Owner challenge={challenge} errors={errors} addChoice={this.addChoice} clearChoices={this.clearChoices} room={room} showChallenges={showChallenges} myId={socket && socket.id} users={users} countDown={countDown} challengeStatus={challengeStatus} selectChallenge={this.selectChallenge} onEditChallenge={this.onEditChallenge} startChallenge={this.startChallenge} challengeResults={challengeResults} setChallengeStatus={this.setChallengeStatus} />\n                                            : <Participant challenge={challenge} errors={errors} answerSent={answerSent} sendAnswer={this.sendAnswer} myId={socket && socket.id} users={users} onEditChallenge={this.onEditChallenge} countDown={countDown} challengeStatus={challengeStatus} challengeResults={challengeResults} setChallengeStatus={this.setChallengeStatus} />\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Right column - messenger */}\n                        <div className=\"col s4\">\n                            <div className=\"card-panel messenger\">\n                                <h5>Messenger</h5>\n                                <div className=\"chat\" id=\"chat\">\n                                    { messages.map((message, i) => <div key={i} className=\"small-text\">{message}</div>)}\n                                </div>\n                    \n                                <form noValidate onSubmit={this.sendMessage}>\n                                    <TextFieldGroup\n                                        type=\"text\"\n                                        placeholder=\"Write a message\"\n                                        name=\"message\"\n                                        classes='input-text'\n                                        value={this.state.message}\n                                        onChange={this.typing}\n                                    />\n                                    <input type=\"submit\" value=\"Send\" className=\"btn btn-primary\"/>\n                                </form>\n                            </div>\n                            { room && <a href={`/room/${room._id}`} ><span className=\"small-text link-dash\">Refresh room if you are experiencing issues.</span></a> }\n                        </div>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\n\n// Map state to props so they can be used in this component\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    profile: state.profile,\n    videos: state.videos\n});\n\n\n// Connect actions to use within redux and export component\nexport default connect(mapStateToProps, { setStream })(withRouter(CreateRoom));\n","import axios from 'axios';\n\n// Import types\nimport { SET_STREAM } from \"./types\";\n\n\nexport const setStream = (stream, user) => {\n    return {\n        type: SET_STREAM,\n        payload: { stream, user }\n    }\n};","import React from 'react';\n\nexport default () => {\n    return (\n        <div class=\"footer\">\n            <div className=\"left\">\n                <a className=\"white-text\" href=\"mailto:sam@realitything.com\" > <span className=\"small-text\">Contact Us</span></a>\n            </div>\n                <span className=\"small-text\">@ 2020 Remote Learning </span>\n            \n            <div className=\"right\">\n                <span className=\"small-text\"> Developed by RealityThing </span>\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\n\n// React Router\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// CSS\nimport './styles/main.css';\n\n// JWT Token\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\n\n// Actions\nimport { logoutUser, setCurrentUser } from './actions/authActions';\n\n// Components\nimport PrivateRoute from './components/layout/PrivateRoute';\n\nimport Navbar from './components/layout/Navbar';\nimport Landing from './components/layout/Landing';\n\nimport Login from './components/account/Login';\nimport Register from './components/account/Register';\n\nimport CreateRoom from './components/room/CreateRoom';\nimport ViewRoom from './components/room/ViewRoom';\nimport Footer from './components/layout/Footer';\n\n// Check for token\nif (localStorage.jwtToken) {\n  // Set account token header\n  setAuthToken(localStorage.jwtToken);\n\n  // Decode token and get user info and expiration\n  const decoded = jwt_decode(localStorage.jwtToken);\n\n  // Set user and isAuthenticate\n  store.dispatch(setCurrentUser(decoded));\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className='App container'>\n            <Route exact path='/' component={Landing} />\n            <Route exact path='/create' component={CreateRoom} />\n            <Route exact path='/room/:id' component={ViewRoom} />\n          </div>\n        </Router>\n        <Footer/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.9911fc78.png\";"],"sourceRoot":""}